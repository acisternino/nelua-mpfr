require 'string'
require 'io'
require 'C.stdio'

require 'mpfr'

local s: mpfr_t
local t: mpfr_t
local u: mpfr_t

-- Version

io.printf("Version %d.%d.%d\n", MPFR_VERSION_MAJOR, MPFR_VERSION_MINOR, MPFR_VERSION_PATCHLEVEL)
io.printf("Version string: %s\n", MPFR_VERSION_STRING)

-- Initialization

mpfr_init2(s, 100)
mpfr_set_d(s, 1.0, MPFR_RNDN)

mpfr_init_set_d(t, 1.0, MPFR_RNDN)

mpfr_init2(u, 100)

io.writef("Default precision: %d\n", mpfr_get_default_prec())

-- Simple loop

for i = 1,100 do
  mpfr_mul_ui(t, t, i, MPFR_RNDN)
  mpfr_set_d(u, 1.0, MPFR_RNDN)
  mpfr_div(u, u, t, MPFR_RNDN)
  mpfr_add(s, s, u, MPFR_RNDN)
end

io.write('Sum is ')
mpfr_out_str(C.stdout, 10, 0, s, MPFR_RNDN)
print()

-- Misce ops

mpfr_sqrt(t, s, MPFR_RNDN)
mpfr_printf("Square root of sum is: %.30Rf\n", &t)

mpfr_mul_ui(s, s, 3, MPFR_RNDN)
mpfr_log(t, s, MPFR_RNDN)
mpfr_printf("Log of 3*sum is: %.30Rf\n", &t)

io.writef("Precision of above: %d\n", mpfr_get_prec(t))
io.writef("Double from above: %f\n", mpfr_get_d(t, MPFR_RNDN))

-- Random

local rs: gmp_randstate_t

gmp_randinit_default(rs)
mpfr_urandomb(u, rs)
mpfr_printf("Random num is: %.30Rf\n", &u)

-- Clean-up

mpfr_clear(s)
mpfr_clear(t)
mpfr_clear(u)

mpfr_free_cache()
